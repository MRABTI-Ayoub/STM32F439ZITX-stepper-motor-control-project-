
PWM_PAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002470  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800261c  0800261c  0001261c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800262c  0800262c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002634  08002634  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800263c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008baf  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000015de  00000000  00000000  00028c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000988  00000000  00000000  0002a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000075e  00000000  00000000  0002ab98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022974  00000000  00000000  0002b2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a3eb  00000000  00000000  0004dc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6067  00000000  00000000  00058055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000279c  00000000  00000000  0012e0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00130858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002604 	.word	0x08002604

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002604 	.word	0x08002604

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <motorDelay>:
#define IN4_PIN GPIO_PIN_3
#define IN4_PORT GPIOA
int stepNumber;          // which step the motor is on

void motorDelay(uint32_t delay)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    if (delay < 60000)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d80b      	bhi.n	8000512 <motorDelay+0x2a>
    {
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <motorDelay+0x44>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
        while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000502:	bf00      	nop
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <motorDelay+0x44>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	d8f9      	bhi.n	8000504 <motorDelay+0x1c>
    }
    else
    {
        HAL_Delay(delay/1000);
    }
}
 8000510:	e007      	b.n	8000522 <motorDelay+0x3a>
        HAL_Delay(delay/1000);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <motorDelay+0x48>)
 8000516:	fba2 2303 	umull	r2, r3, r2, r3
 800051a:	099b      	lsrs	r3, r3, #6
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fcad 	bl	8000e7c <HAL_Delay>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000028 	.word	0x20000028
 8000530:	10624dd3 	.word	0x10624dd3

08000534 <motorOn>:

void motorOn()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
    // Find out which step the motor is on
    switch (stepNumber)
 8000538:	4b3d      	ldr	r3, [pc, #244]	; (8000630 <motorOn+0xfc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3b01      	subs	r3, #1
 800053e:	2b03      	cmp	r3, #3
 8000540:	d872      	bhi.n	8000628 <motorOn+0xf4>
 8000542:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <motorOn+0x14>)
 8000544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000548:	08000559 	.word	0x08000559
 800054c:	0800058d 	.word	0x0800058d
 8000550:	080005c1 	.word	0x080005c1
 8000554:	080005f5 	.word	0x080005f5
    {
      case 1:
          HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, 1);   // IN1
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055e:	4835      	ldr	r0, [pc, #212]	; (8000634 <motorOn+0x100>)
 8000560:	f000 ff6e 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800056a:	4832      	ldr	r0, [pc, #200]	; (8000634 <motorOn+0x100>)
 800056c:	f000 ff68 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000570:	2200      	movs	r2, #0
 8000572:	2110      	movs	r1, #16
 8000574:	4830      	ldr	r0, [pc, #192]	; (8000638 <motorOn+0x104>)
 8000576:	f000 ff63 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 800057a:	2201      	movs	r2, #1
 800057c:	2108      	movs	r1, #8
 800057e:	482e      	ldr	r0, [pc, #184]	; (8000638 <motorOn+0x104>)
 8000580:	f000 ff5e 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_Delay(9);
 8000584:	2009      	movs	r0, #9
 8000586:	f000 fc79 	bl	8000e7c <HAL_Delay>
        break;
 800058a:	e04e      	b.n	800062a <motorOn+0xf6>
      case 2:
          HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000592:	4828      	ldr	r0, [pc, #160]	; (8000634 <motorOn+0x100>)
 8000594:	f000 ff54 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059e:	4825      	ldr	r0, [pc, #148]	; (8000634 <motorOn+0x100>)
 80005a0:	f000 ff4e 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80005a4:	2201      	movs	r2, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	4823      	ldr	r0, [pc, #140]	; (8000638 <motorOn+0x104>)
 80005aa:	f000 ff49 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80005ae:	2200      	movs	r2, #0
 80005b0:	2108      	movs	r1, #8
 80005b2:	4821      	ldr	r0, [pc, #132]	; (8000638 <motorOn+0x104>)
 80005b4:	f000 ff44 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_Delay(9);
 80005b8:	2009      	movs	r0, #9
 80005ba:	f000 fc5f 	bl	8000e7c <HAL_Delay>
        break;
 80005be:	e034      	b.n	800062a <motorOn+0xf6>
      case 3:
          HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	481b      	ldr	r0, [pc, #108]	; (8000634 <motorOn+0x100>)
 80005c8:	f000 ff3a 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4818      	ldr	r0, [pc, #96]	; (8000634 <motorOn+0x100>)
 80005d4:	f000 ff34 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80005d8:	2201      	movs	r2, #1
 80005da:	2110      	movs	r1, #16
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <motorOn+0x104>)
 80005de:	f000 ff2f 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80005e2:	2200      	movs	r2, #0
 80005e4:	2108      	movs	r1, #8
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <motorOn+0x104>)
 80005e8:	f000 ff2a 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_Delay(9);
 80005ec:	2009      	movs	r0, #9
 80005ee:	f000 fc45 	bl	8000e7c <HAL_Delay>
        break;
 80005f2:	e01a      	b.n	800062a <motorOn+0xf6>
      case 4:
          HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	480e      	ldr	r0, [pc, #56]	; (8000634 <motorOn+0x100>)
 80005fc:	f000 ff20 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <motorOn+0x100>)
 8000608:	f000 ff1a 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800060c:	2200      	movs	r2, #0
 800060e:	2110      	movs	r1, #16
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <motorOn+0x104>)
 8000612:	f000 ff15 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000616:	2201      	movs	r2, #1
 8000618:	2108      	movs	r1, #8
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <motorOn+0x104>)
 800061c:	f000 ff10 	bl	8001440 <HAL_GPIO_WritePin>
          HAL_Delay(9);
 8000620:	2009      	movs	r0, #9
 8000622:	f000 fc2b 	bl	8000e7c <HAL_Delay>
        break;
 8000626:	e000      	b.n	800062a <motorOn+0xf6>
      default:
        break;
 8000628:	bf00      	nop
    }
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000070 	.word	0x20000070
 8000634:	40020400 	.word	0x40020400
 8000638:	40020000 	.word	0x40020000

0800063c <motorOff>:
void motorOff()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    // Switch off the idle current to the motor
    // Otherwise L298N module will heat up
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000646:	480a      	ldr	r0, [pc, #40]	; (8000670 <motorOff+0x34>)
 8000648:	f000 fefa 	bl	8001440 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <motorOff+0x34>)
 8000654:	f000 fef4 	bl	8001440 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000658:	2200      	movs	r2, #0
 800065a:	2110      	movs	r1, #16
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <motorOff+0x38>)
 800065e:	f000 feef 	bl	8001440 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000662:	2200      	movs	r2, #0
 8000664:	2108      	movs	r1, #8
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <motorOff+0x38>)
 8000668:	f000 feea 	bl	8001440 <HAL_GPIO_WritePin>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40020400 	.word	0x40020400
 8000674:	40020000 	.word	0x40020000

08000678 <stepCV>:
void stepCV (int steps, float speed) // CV - Clockwise
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	ed87 0a00 	vstr	s0, [r7]
  uint32_t delay = 60*1000*1000/200/speed;
 8000684:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80007bc <stepCV+0x144>
 8000688:	ed97 7a00 	vldr	s14, [r7]
 800068c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000694:	ee17 3a90 	vmov	r3, s15
 8000698:	60bb      	str	r3, [r7, #8]
  for(int x=0; x<steps; x=x+1)
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e082      	b.n	80007a6 <stepCV+0x12e>
  {
    // Step to the next step rotaion derction
    switch (stepNumber)
 80006a0:	4b47      	ldr	r3, [pc, #284]	; (80007c0 <stepCV+0x148>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d879      	bhi.n	800079e <stepCV+0x126>
 80006aa:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <stepCV+0x38>)
 80006ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006fb 	.word	0x080006fb
 80006b8:	08000735 	.word	0x08000735
 80006bc:	08000765 	.word	0x08000765
    {
      case 1:
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c6:	483f      	ldr	r0, [pc, #252]	; (80007c4 <stepCV+0x14c>)
 80006c8:	f000 feba 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d2:	483c      	ldr	r0, [pc, #240]	; (80007c4 <stepCV+0x14c>)
 80006d4:	f000 feb4 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80006d8:	2201      	movs	r2, #1
 80006da:	2110      	movs	r1, #16
 80006dc:	483a      	ldr	r0, [pc, #232]	; (80007c8 <stepCV+0x150>)
 80006de:	f000 feaf 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80006e2:	2200      	movs	r2, #0
 80006e4:	2108      	movs	r1, #8
 80006e6:	4838      	ldr	r0, [pc, #224]	; (80007c8 <stepCV+0x150>)
 80006e8:	f000 feaa 	bl	8001440 <HAL_GPIO_WritePin>
        motorDelay(delay);
 80006ec:	68b8      	ldr	r0, [r7, #8]
 80006ee:	f7ff fefb 	bl	80004e8 <motorDelay>
        stepNumber = 2;
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <stepCV+0x148>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	601a      	str	r2, [r3, #0]
        break;
 80006f8:	e052      	b.n	80007a0 <stepCV+0x128>
      case 2:
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000700:	4830      	ldr	r0, [pc, #192]	; (80007c4 <stepCV+0x14c>)
 8000702:	f000 fe9d 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070c:	482d      	ldr	r0, [pc, #180]	; (80007c4 <stepCV+0x14c>)
 800070e:	f000 fe97 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 8000712:	2201      	movs	r2, #1
 8000714:	2110      	movs	r1, #16
 8000716:	482c      	ldr	r0, [pc, #176]	; (80007c8 <stepCV+0x150>)
 8000718:	f000 fe92 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 800071c:	2200      	movs	r2, #0
 800071e:	2108      	movs	r1, #8
 8000720:	4829      	ldr	r0, [pc, #164]	; (80007c8 <stepCV+0x150>)
 8000722:	f000 fe8d 	bl	8001440 <HAL_GPIO_WritePin>
        motorDelay(delay);
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	f7ff fede 	bl	80004e8 <motorDelay>
        stepNumber = 3;
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <stepCV+0x148>)
 800072e:	2203      	movs	r2, #3
 8000730:	601a      	str	r2, [r3, #0]
        break;
 8000732:	e035      	b.n	80007a0 <stepCV+0x128>
      case 3:

        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4822      	ldr	r0, [pc, #136]	; (80007c4 <stepCV+0x14c>)
 800073c:	f000 fe80 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <stepCV+0x14c>)
 8000748:	f000 fe7a 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800074c:	2200      	movs	r2, #0
 800074e:	2110      	movs	r1, #16
 8000750:	481d      	ldr	r0, [pc, #116]	; (80007c8 <stepCV+0x150>)
 8000752:	f000 fe75 	bl	8001440 <HAL_GPIO_WritePin>
        motorDelay(delay);
 8000756:	68b8      	ldr	r0, [r7, #8]
 8000758:	f7ff fec6 	bl	80004e8 <motorDelay>
        stepNumber = 4;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <stepCV+0x148>)
 800075e:	2204      	movs	r2, #4
 8000760:	601a      	str	r2, [r3, #0]
        break;
 8000762:	e01d      	b.n	80007a0 <stepCV+0x128>
      case 4:
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076a:	4816      	ldr	r0, [pc, #88]	; (80007c4 <stepCV+0x14c>)
 800076c:	f000 fe68 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <stepCV+0x14c>)
 8000778:	f000 fe62 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800077c:	2200      	movs	r2, #0
 800077e:	2110      	movs	r1, #16
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <stepCV+0x150>)
 8000782:	f000 fe5d 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000786:	2201      	movs	r2, #1
 8000788:	2108      	movs	r1, #8
 800078a:	480f      	ldr	r0, [pc, #60]	; (80007c8 <stepCV+0x150>)
 800078c:	f000 fe58 	bl	8001440 <HAL_GPIO_WritePin>
        motorDelay(delay);
 8000790:	68b8      	ldr	r0, [r7, #8]
 8000792:	f7ff fea9 	bl	80004e8 <motorDelay>
        stepNumber = 1;
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <stepCV+0x148>)
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
        break;
 800079c:	e000      	b.n	80007a0 <stepCV+0x128>
      default:
        break;
 800079e:	bf00      	nop
  for(int x=0; x<steps; x=x+1)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	f6ff af78 	blt.w	80006a0 <stepCV+0x28>
    }
  }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	48927c00 	.word	0x48927c00
 80007c0:	20000070 	.word	0x20000070
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40020000 	.word	0x40020000

080007cc <stepCCV>:
void stepCCV (int steps, float speed) // CCV - Counter Clockwise
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	ed87 0a00 	vstr	s0, [r7]
  uint32_t delay = 60*1000*1000/200/speed;
 80007d8:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8000918 <stepCCV+0x14c>
 80007dc:	ed97 7a00 	vldr	s14, [r7]
 80007e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007e8:	ee17 3a90 	vmov	r3, s15
 80007ec:	60bb      	str	r3, [r7, #8]
  for(int x=0; x<steps; x=x+1)
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	e087      	b.n	8000904 <stepCCV+0x138>
  {
    // Step to the previous step
    switch (stepNumber)
 80007f4:	4b49      	ldr	r3, [pc, #292]	; (800091c <stepCCV+0x150>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d87e      	bhi.n	80008fc <stepCCV+0x130>
 80007fe:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <stepCCV+0x38>)
 8000800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000804:	08000815 	.word	0x08000815
 8000808:	0800084f 	.word	0x0800084f
 800080c:	08000889 	.word	0x08000889
 8000810:	080008c3 	.word	0x080008c3
    {
      case 1:
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	4841      	ldr	r0, [pc, #260]	; (8000920 <stepCCV+0x154>)
 800081c:	f000 fe10 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000826:	483e      	ldr	r0, [pc, #248]	; (8000920 <stepCCV+0x154>)
 8000828:	f000 fe0a 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800082c:	2200      	movs	r2, #0
 800082e:	2110      	movs	r1, #16
 8000830:	483c      	ldr	r0, [pc, #240]	; (8000924 <stepCCV+0x158>)
 8000832:	f000 fe05 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000836:	2201      	movs	r2, #1
 8000838:	2108      	movs	r1, #8
 800083a:	483a      	ldr	r0, [pc, #232]	; (8000924 <stepCCV+0x158>)
 800083c:	f000 fe00 	bl	8001440 <HAL_GPIO_WritePin>
        motorDelay(delay);
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f7ff fe51 	bl	80004e8 <motorDelay>
        stepNumber = 4;
 8000846:	4b35      	ldr	r3, [pc, #212]	; (800091c <stepCCV+0x150>)
 8000848:	2204      	movs	r2, #4
 800084a:	601a      	str	r2, [r3, #0]
        break;
 800084c:	e057      	b.n	80008fe <stepCCV+0x132>
      case 2:
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000854:	4832      	ldr	r0, [pc, #200]	; (8000920 <stepCCV+0x154>)
 8000856:	f000 fdf3 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000860:	482f      	ldr	r0, [pc, #188]	; (8000920 <stepCCV+0x154>)
 8000862:	f000 fded 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000866:	2200      	movs	r2, #0
 8000868:	2110      	movs	r1, #16
 800086a:	482e      	ldr	r0, [pc, #184]	; (8000924 <stepCCV+0x158>)
 800086c:	f000 fde8 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000870:	2201      	movs	r2, #1
 8000872:	2108      	movs	r1, #8
 8000874:	482b      	ldr	r0, [pc, #172]	; (8000924 <stepCCV+0x158>)
 8000876:	f000 fde3 	bl	8001440 <HAL_GPIO_WritePin>
        motorDelay(delay);
 800087a:	68b8      	ldr	r0, [r7, #8]
 800087c:	f7ff fe34 	bl	80004e8 <motorDelay>
        stepNumber = 1;
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <stepCCV+0x150>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
        break;
 8000886:	e03a      	b.n	80008fe <stepCCV+0x132>
      case 3:
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	4824      	ldr	r0, [pc, #144]	; (8000920 <stepCCV+0x154>)
 8000890:	f000 fdd6 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800089a:	4821      	ldr	r0, [pc, #132]	; (8000920 <stepCCV+0x154>)
 800089c:	f000 fdd0 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80008a0:	2201      	movs	r2, #1
 80008a2:	2110      	movs	r1, #16
 80008a4:	481f      	ldr	r0, [pc, #124]	; (8000924 <stepCCV+0x158>)
 80008a6:	f000 fdcb 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80008aa:	2200      	movs	r2, #0
 80008ac:	2108      	movs	r1, #8
 80008ae:	481d      	ldr	r0, [pc, #116]	; (8000924 <stepCCV+0x158>)
 80008b0:	f000 fdc6 	bl	8001440 <HAL_GPIO_WritePin>
        motorDelay(delay);
 80008b4:	68b8      	ldr	r0, [r7, #8]
 80008b6:	f7ff fe17 	bl	80004e8 <motorDelay>
        stepNumber = 2;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <stepCCV+0x150>)
 80008bc:	2202      	movs	r2, #2
 80008be:	601a      	str	r2, [r3, #0]
        break;
 80008c0:	e01d      	b.n	80008fe <stepCCV+0x132>
      case 4:
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c8:	4815      	ldr	r0, [pc, #84]	; (8000920 <stepCCV+0x154>)
 80008ca:	f000 fdb9 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d4:	4812      	ldr	r0, [pc, #72]	; (8000920 <stepCCV+0x154>)
 80008d6:	f000 fdb3 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80008da:	2201      	movs	r2, #1
 80008dc:	2110      	movs	r1, #16
 80008de:	4811      	ldr	r0, [pc, #68]	; (8000924 <stepCCV+0x158>)
 80008e0:	f000 fdae 	bl	8001440 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80008e4:	2200      	movs	r2, #0
 80008e6:	2108      	movs	r1, #8
 80008e8:	480e      	ldr	r0, [pc, #56]	; (8000924 <stepCCV+0x158>)
 80008ea:	f000 fda9 	bl	8001440 <HAL_GPIO_WritePin>
        motorDelay(delay);
 80008ee:	68b8      	ldr	r0, [r7, #8]
 80008f0:	f7ff fdfa 	bl	80004e8 <motorDelay>
        stepNumber = 3;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <stepCCV+0x150>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	601a      	str	r2, [r3, #0]
        break;
 80008fa:	e000      	b.n	80008fe <stepCCV+0x132>
      default:
        break;
 80008fc:	bf00      	nop
  for(int x=0; x<steps; x=x+1)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	f6ff af73 	blt.w	80007f4 <stepCCV+0x28>
    }
  }
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	48927c00 	.word	0x48927c00
 800091c:	20000070 	.word	0x20000070
 8000920:	40020400 	.word	0x40020400
 8000924:	40020000 	.word	0x40020000

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 fa34 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f84e 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f000 f904 	bl	8000b40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000938:	f000 f8b6 	bl	8000aa8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800093c:	4820      	ldr	r0, [pc, #128]	; (80009c0 <main+0x98>)
 800093e:	f001 fa0d 	bl	8001d5c <HAL_TIM_Base_Start>
  stepNumber = 1;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <main+0x9c>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  motorOn();
 8000948:	f7ff fdf4 	bl	8000534 <motorOn>
	      stepCV(200,150.0f); // Clockwise 200 steps 150 RPM
 800094c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80009c8 <main+0xa0>
 8000950:	20c8      	movs	r0, #200	; 0xc8
 8000952:	f7ff fe91 	bl	8000678 <stepCV>
	      HAL_Delay(2000);
 8000956:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800095a:	f000 fa8f 	bl	8000e7c <HAL_Delay>

	      motorOn();
 800095e:	f7ff fde9 	bl	8000534 <motorOn>
	      stepCCV(100,150.0f); // Counter Clockwise 100 steps 150 RPM
 8000962:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80009c8 <main+0xa0>
 8000966:	2064      	movs	r0, #100	; 0x64
 8000968:	f7ff ff30 	bl	80007cc <stepCCV>
	      HAL_Delay(2000);
 800096c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000970:	f000 fa84 	bl	8000e7c <HAL_Delay>

	      motorOn();
 8000974:	f7ff fdde 	bl	8000534 <motorOn>
	      stepCV(7,50.f); // Clockwise 7 steps 1/2 RPM
 8000978:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80009cc <main+0xa4>
 800097c:	2007      	movs	r0, #7
 800097e:	f7ff fe7b 	bl	8000678 <stepCV>
	      HAL_Delay(2000);
 8000982:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000986:	f000 fa79 	bl	8000e7c <HAL_Delay>

	      motorOn();
 800098a:	f7ff fdd3 	bl	8000534 <motorOn>
	      stepCCV(9,25.f); // Counter Clockwise 9 steps 1/2 RPM
 800098e:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8000992:	2009      	movs	r0, #9
 8000994:	f7ff ff1a 	bl	80007cc <stepCCV>
	      HAL_Delay(2000);
 8000998:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800099c:	f000 fa6e 	bl	8000e7c <HAL_Delay>

	      motorOn();
 80009a0:	f7ff fdc8 	bl	8000534 <motorOn>
	      stepCV(1500,30.0f); // Clockwise 1500 steps 30 RPM
 80009a4:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80009a8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80009ac:	f7ff fe64 	bl	8000678 <stepCV>
	      motorOff();
 80009b0:	f7ff fe44 	bl	800063c <motorOff>
	      HAL_Delay(2000);
 80009b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b8:	f000 fa60 	bl	8000e7c <HAL_Delay>
	  motorOn();
 80009bc:	e7c4      	b.n	8000948 <main+0x20>
 80009be:	bf00      	nop
 80009c0:	20000028 	.word	0x20000028
 80009c4:	20000070 	.word	0x20000070
 80009c8:	43160000 	.word	0x43160000
 80009cc:	42480000 	.word	0x42480000

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2230      	movs	r2, #48	; 0x30
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fde4 	bl	80025ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <SystemClock_Config+0xd0>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <SystemClock_Config+0xd0>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <SystemClock_Config+0xd4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <SystemClock_Config+0xd4>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <SystemClock_Config+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a44:	2308      	movs	r3, #8
 8000a46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a48:	2348      	movs	r3, #72	; 0x48
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fd0b 	bl	8001474 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a64:	f000 f8d4 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2102      	movs	r1, #2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 ff6c 	bl	8001964 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a92:	f000 f8bd 	bl	8000c10 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3750      	adds	r7, #80	; 0x50
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM2_Init+0x94>)
 8000ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_TIM2_Init+0x94>)
 8000ace:	2247      	movs	r2, #71	; 0x47
 8000ad0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM2_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM2_Init+0x94>)
 8000ada:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ade:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_TIM2_Init+0x94>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_TIM2_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <MX_TIM2_Init+0x94>)
 8000aee:	f001 f8e5 	bl	8001cbc <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000af8:	f000 f88a 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM2_Init+0x94>)
 8000b0a:	f001 fa7f 	bl	800200c <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b14:	f000 f87c 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM2_Init+0x94>)
 8000b26:	f001 fcb1 	bl	800248c <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f000 f86e 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000028 	.word	0x20000028

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a29      	ldr	r2, [pc, #164]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a22      	ldr	r2, [pc, #136]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2118      	movs	r1, #24
 8000bae:	4816      	ldr	r0, [pc, #88]	; (8000c08 <MX_GPIO_Init+0xc8>)
 8000bb0:	f000 fc46 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000bba:	4814      	ldr	r0, [pc, #80]	; (8000c0c <MX_GPIO_Init+0xcc>)
 8000bbc:	f000 fc40 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000bc0:	2318      	movs	r3, #24
 8000bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_GPIO_Init+0xc8>)
 8000bd8:	f000 fa86 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_GPIO_Init+0xcc>)
 8000bf6:	f000 fa77 	bl	80010e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40020400 	.word	0x40020400

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c7c:	d115      	bne.n	8000caa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_TIM_Base_MspInit+0x48>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <HAL_TIM_Base_MspInit+0x48>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_TIM_Base_MspInit+0x48>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	201c      	movs	r0, #28
 8000ca0:	f000 f9eb 	bl	800107a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ca4:	201c      	movs	r0, #28
 8000ca6:	f000 fa04 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f89a 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM2_IRQHandler+0x10>)
 8000d12:	f001 f88b 	bl	8001e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000028 	.word	0x20000028

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d48:	f7ff ffea 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f001 fc23 	bl	80025bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fdd7 	bl	8000928 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d88:	0800263c 	.word	0x0800263c
  ldr r2, =_sbss
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d90:	20000078 	.word	0x20000078

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f94f 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff ff26 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f967 	bl	80010ce <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 f92f 	bl	800107a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000074 	.word	0x20000074

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000074 	.word	0x20000074

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff29 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff3e 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff31 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffa2 	bl	8001020 <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e177      	b.n	80013f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 8166 	bne.w	80013ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80c0 	beq.w	80013ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b66      	ldr	r3, [pc, #408]	; (800140c <HAL_GPIO_Init+0x324>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a65      	ldr	r2, [pc, #404]	; (800140c <HAL_GPIO_Init+0x324>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_GPIO_Init+0x324>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a61      	ldr	r2, [pc, #388]	; (8001410 <HAL_GPIO_Init+0x328>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_GPIO_Init+0x32c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d037      	beq.n	8001326 <HAL_GPIO_Init+0x23e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a57      	ldr	r2, [pc, #348]	; (8001418 <HAL_GPIO_Init+0x330>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d031      	beq.n	8001322 <HAL_GPIO_Init+0x23a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a56      	ldr	r2, [pc, #344]	; (800141c <HAL_GPIO_Init+0x334>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d02b      	beq.n	800131e <HAL_GPIO_Init+0x236>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a55      	ldr	r2, [pc, #340]	; (8001420 <HAL_GPIO_Init+0x338>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d025      	beq.n	800131a <HAL_GPIO_Init+0x232>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a54      	ldr	r2, [pc, #336]	; (8001424 <HAL_GPIO_Init+0x33c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01f      	beq.n	8001316 <HAL_GPIO_Init+0x22e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a53      	ldr	r2, [pc, #332]	; (8001428 <HAL_GPIO_Init+0x340>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x22a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_GPIO_Init+0x344>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x226>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a51      	ldr	r2, [pc, #324]	; (8001430 <HAL_GPIO_Init+0x348>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x222>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_GPIO_Init+0x34c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x21e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x350>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x21a>
 80012fe:	2309      	movs	r3, #9
 8001300:	e012      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001302:	230a      	movs	r3, #10
 8001304:	e010      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001306:	2308      	movs	r3, #8
 8001308:	e00e      	b.n	8001328 <HAL_GPIO_Init+0x240>
 800130a:	2307      	movs	r3, #7
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x240>
 800130e:	2306      	movs	r3, #6
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x240>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x240>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_GPIO_Init+0x328>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	4b3d      	ldr	r3, [pc, #244]	; (800143c <HAL_GPIO_Init+0x354>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136a:	4a34      	ldr	r2, [pc, #208]	; (800143c <HAL_GPIO_Init+0x354>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001370:	4b32      	ldr	r3, [pc, #200]	; (800143c <HAL_GPIO_Init+0x354>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001394:	4a29      	ldr	r2, [pc, #164]	; (800143c <HAL_GPIO_Init+0x354>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <HAL_GPIO_Init+0x354>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013be:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_GPIO_Init+0x354>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_GPIO_Init+0x354>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <HAL_GPIO_Init+0x354>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae84 	bls.w	8001104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40022000 	.word	0x40022000
 8001438:	40022400 	.word	0x40022400
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e267      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d075      	beq.n	800157e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001492:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d00c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149e:	4b85      	ldr	r3, [pc, #532]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d112      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014aa:	4b82      	ldr	r3, [pc, #520]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b6:	d10b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4b7e      	ldr	r3, [pc, #504]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d05b      	beq.n	800157c <HAL_RCC_OscConfig+0x108>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d157      	bne.n	800157c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e242      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x74>
 80014da:	4b76      	ldr	r3, [pc, #472]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a75      	ldr	r2, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x98>
 80014f2:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a6f      	ldr	r2, [pc, #444]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b6d      	ldr	r3, [pc, #436]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6c      	ldr	r2, [pc, #432]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 800150c:	4b69      	ldr	r3, [pc, #420]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a68      	ldr	r2, [pc, #416]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b66      	ldr	r3, [pc, #408]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a65      	ldr	r2, [pc, #404]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc9a 	bl	8000e64 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc96 	bl	8000e64 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e207      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b5b      	ldr	r3, [pc, #364]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xc0>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fc86 	bl	8000e64 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fc82 	bl	8000e64 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1f3      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0xe8>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d063      	beq.n	8001652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158a:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11c      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1c7      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4937      	ldr	r1, [pc, #220]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	e03a      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_RCC_OscConfig+0x244>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fc3b 	bl	8000e64 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc37 	bl	8000e64 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1a8      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4925      	ldr	r1, [pc, #148]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e015      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_RCC_OscConfig+0x244>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fc1a 	bl	8000e64 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001634:	f7ff fc16 	bl	8000e64 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e187      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d036      	beq.n	80016cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d016      	beq.n	8001694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_RCC_OscConfig+0x248>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fbfa 	bl	8000e64 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fbf6 	bl	8000e64 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e167      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x200>
 8001692:	e01b      	b.n	80016cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_OscConfig+0x248>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fbe3 	bl	8000e64 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	e00e      	b.n	80016c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff fbdf 	bl	8000e64 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d907      	bls.n	80016c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e150      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	42470000 	.word	0x42470000
 80016bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ea      	bne.n	80016a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8097 	beq.w	8001808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016de:	4b81      	ldr	r3, [pc, #516]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10f      	bne.n	800170a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b7d      	ldr	r3, [pc, #500]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a7c      	ldr	r2, [pc, #496]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b7a      	ldr	r3, [pc, #488]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <HAL_RCC_OscConfig+0x474>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d118      	bne.n	8001748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	4b74      	ldr	r3, [pc, #464]	; (80018e8 <HAL_RCC_OscConfig+0x474>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a73      	ldr	r2, [pc, #460]	; (80018e8 <HAL_RCC_OscConfig+0x474>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001722:	f7ff fb9f 	bl	8000e64 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff fb9b 	bl	8000e64 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e10c      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <HAL_RCC_OscConfig+0x474>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x2ea>
 8001750:	4b64      	ldr	r3, [pc, #400]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	4a63      	ldr	r2, [pc, #396]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6713      	str	r3, [r2, #112]	; 0x70
 800175c:	e01c      	b.n	8001798 <HAL_RCC_OscConfig+0x324>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x30c>
 8001766:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6713      	str	r3, [r2, #112]	; 0x70
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	4a5b      	ldr	r2, [pc, #364]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	; 0x70
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0x324>
 8001780:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a57      	ldr	r2, [pc, #348]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
 800178c:	4b55      	ldr	r3, [pc, #340]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a54      	ldr	r2, [pc, #336]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 0304 	bic.w	r3, r3, #4
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d015      	beq.n	80017cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fb60 	bl	8000e64 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fb5c 	bl	8000e64 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e0cb      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017be:	4b49      	ldr	r3, [pc, #292]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0ee      	beq.n	80017a8 <HAL_RCC_OscConfig+0x334>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fb4a 	bl	8000e64 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb46 	bl	8000e64 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0b5      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ee      	bne.n	80017d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4b39      	ldr	r3, [pc, #228]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	4a38      	ldr	r2, [pc, #224]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80a1 	beq.w	8001954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001812:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d05c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d141      	bne.n	80018aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <HAL_RCC_OscConfig+0x478>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fb1a 	bl	8000e64 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fb16 	bl	8000e64 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e087      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	491b      	ldr	r1, [pc, #108]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_RCC_OscConfig+0x478>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff faef 	bl	8000e64 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff faeb 	bl	8000e64 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e05c      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x416>
 80018a8:	e054      	b.n	8001954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_RCC_OscConfig+0x478>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fad8 	bl	8000e64 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fad4 	bl	8000e64 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e045      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x444>
 80018d6:	e03d      	b.n	8001954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e038      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000
 80018ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_RCC_OscConfig+0x4ec>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d028      	beq.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d121      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d11a      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001920:	4013      	ands	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001928:	4293      	cmp	r3, r2
 800192a:	d111      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	085b      	lsrs	r3, r3, #1
 8001938:	3b01      	subs	r3, #1
 800193a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0cc      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d90c      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0b8      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b8:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a58      	ldr	r2, [pc, #352]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a52      	ldr	r2, [pc, #328]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	494d      	ldr	r1, [pc, #308]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d044      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d119      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e07f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e067      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4934      	ldr	r1, [pc, #208]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a54:	f7ff fa06 	bl	8000e64 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7ff fa02 	bl	8000e64 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e04f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 020c 	and.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1eb      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d20c      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e032      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4916      	ldr	r1, [pc, #88]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	490e      	ldr	r1, [pc, #56]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aea:	f000 f821 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001aee:	4602      	mov	r2, r0
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	490a      	ldr	r1, [pc, #40]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	5ccb      	ldrb	r3, [r1, r3]
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f966 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00
 8001b20:	40023800 	.word	0x40023800
 8001b24:	0800261c 	.word	0x0800261c
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b34:	b090      	sub	sp, #64	; 0x40
 8001b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d00d      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x40>
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	f200 80a1 	bhi.w	8001c9c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b62:	e09b      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b68:	e09b      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b6a:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b6e:	e098      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b70:	4b4f      	ldr	r3, [pc, #316]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d028      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	099b      	lsrs	r3, r3, #6
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	627a      	str	r2, [r7, #36]	; 0x24
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b9c:	fb03 f201 	mul.w	r2, r3, r1
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	fb00 f303 	mul.w	r3, r0, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a43      	ldr	r2, [pc, #268]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001baa:	fba0 1202 	umull	r1, r2, r0, r2
 8001bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb6:	4413      	add	r3, r2
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	61fa      	str	r2, [r7, #28]
 8001bc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bca:	f7fe fb0f 	bl	80001ec <__aeabi_uldivmod>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd6:	e053      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	2200      	movs	r2, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	617a      	str	r2, [r7, #20]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bea:	f04f 0b00 	mov.w	fp, #0
 8001bee:	4652      	mov	r2, sl
 8001bf0:	465b      	mov	r3, fp
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	0159      	lsls	r1, r3, #5
 8001bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c00:	0150      	lsls	r0, r2, #5
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	ebb2 080a 	subs.w	r8, r2, sl
 8001c0a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c22:	ebb2 0408 	subs.w	r4, r2, r8
 8001c26:	eb63 0509 	sbc.w	r5, r3, r9
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	00eb      	lsls	r3, r5, #3
 8001c34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c38:	00e2      	lsls	r2, r4, #3
 8001c3a:	4614      	mov	r4, r2
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	eb14 030a 	adds.w	r3, r4, sl
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	eb45 030b 	adc.w	r3, r5, fp
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c56:	4629      	mov	r1, r5
 8001c58:	028b      	lsls	r3, r1, #10
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c60:	4621      	mov	r1, r4
 8001c62:	028a      	lsls	r2, r1, #10
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c74:	f7fe faba 	bl	80001ec <__aeabi_uldivmod>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3740      	adds	r7, #64	; 0x40
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	017d7840 	.word	0x017d7840

08001cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e041      	b.n	8001d52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe ffc2 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f000 fa80 	bl	8002200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d001      	beq.n	8001d74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e046      	b.n	8001e02 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <HAL_TIM_Base_Start+0xb4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d022      	beq.n	8001dcc <HAL_TIM_Base_Start+0x70>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8e:	d01d      	beq.n	8001dcc <HAL_TIM_Base_Start+0x70>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_TIM_Base_Start+0xb8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d018      	beq.n	8001dcc <HAL_TIM_Base_Start+0x70>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1e      	ldr	r2, [pc, #120]	; (8001e18 <HAL_TIM_Base_Start+0xbc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_TIM_Base_Start+0x70>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <HAL_TIM_Base_Start+0xc0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00e      	beq.n	8001dcc <HAL_TIM_Base_Start+0x70>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_TIM_Base_Start+0xc4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d009      	beq.n	8001dcc <HAL_TIM_Base_Start+0x70>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_TIM_Base_Start+0xc8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_TIM_Base_Start+0x70>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_TIM_Base_Start+0xcc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d111      	bne.n	8001df0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d010      	beq.n	8001e00 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dee:	e007      	b.n	8001e00 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40010000 	.word	0x40010000
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40000800 	.word	0x40000800
 8001e1c:	40000c00 	.word	0x40000c00
 8001e20:	40010400 	.word	0x40010400
 8001e24:	40014000 	.word	0x40014000
 8001e28:	40001800 	.word	0x40001800

08001e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d020      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01b      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0202 	mvn.w	r2, #2
 8001e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f9a3 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f995 	bl	80021ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f9a6 	bl	80021d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d020      	beq.n	8001edc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0204 	mvn.w	r2, #4
 8001eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f97d 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
 8001ec8:	e005      	b.n	8001ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f96f 	bl	80021ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f980 	bl	80021d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d020      	beq.n	8001f28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01b      	beq.n	8001f28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0208 	mvn.w	r2, #8
 8001ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2204      	movs	r2, #4
 8001efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f957 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f949 	bl	80021ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f95a 	bl	80021d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d020      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0210 	mvn.w	r2, #16
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2208      	movs	r2, #8
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f931 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f923 	bl	80021ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f934 	bl	80021d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0201 	mvn.w	r2, #1
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f901 	bl	800219a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00c      	beq.n	8001fbc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 faee 	bl	8002598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f905 	bl	80021ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00c      	beq.n	8002004 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0220 	mvn.w	r2, #32
 8001ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fac0 	bl	8002584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_TIM_ConfigClockSource+0x1c>
 8002024:	2302      	movs	r3, #2
 8002026:	e0b4      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x186>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800204e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002060:	d03e      	beq.n	80020e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002066:	f200 8087 	bhi.w	8002178 <HAL_TIM_ConfigClockSource+0x16c>
 800206a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206e:	f000 8086 	beq.w	800217e <HAL_TIM_ConfigClockSource+0x172>
 8002072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002076:	d87f      	bhi.n	8002178 <HAL_TIM_ConfigClockSource+0x16c>
 8002078:	2b70      	cmp	r3, #112	; 0x70
 800207a:	d01a      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0xa6>
 800207c:	2b70      	cmp	r3, #112	; 0x70
 800207e:	d87b      	bhi.n	8002178 <HAL_TIM_ConfigClockSource+0x16c>
 8002080:	2b60      	cmp	r3, #96	; 0x60
 8002082:	d050      	beq.n	8002126 <HAL_TIM_ConfigClockSource+0x11a>
 8002084:	2b60      	cmp	r3, #96	; 0x60
 8002086:	d877      	bhi.n	8002178 <HAL_TIM_ConfigClockSource+0x16c>
 8002088:	2b50      	cmp	r3, #80	; 0x50
 800208a:	d03c      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0xfa>
 800208c:	2b50      	cmp	r3, #80	; 0x50
 800208e:	d873      	bhi.n	8002178 <HAL_TIM_ConfigClockSource+0x16c>
 8002090:	2b40      	cmp	r3, #64	; 0x40
 8002092:	d058      	beq.n	8002146 <HAL_TIM_ConfigClockSource+0x13a>
 8002094:	2b40      	cmp	r3, #64	; 0x40
 8002096:	d86f      	bhi.n	8002178 <HAL_TIM_ConfigClockSource+0x16c>
 8002098:	2b30      	cmp	r3, #48	; 0x30
 800209a:	d064      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x15a>
 800209c:	2b30      	cmp	r3, #48	; 0x30
 800209e:	d86b      	bhi.n	8002178 <HAL_TIM_ConfigClockSource+0x16c>
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d060      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x15a>
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d867      	bhi.n	8002178 <HAL_TIM_ConfigClockSource+0x16c>
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d05c      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x15a>
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d05a      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x15a>
 80020b0:	e062      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020c2:	f000 f9c3 	bl	800244c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	609a      	str	r2, [r3, #8]
      break;
 80020de:	e04f      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020f0:	f000 f9ac 	bl	800244c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002102:	609a      	str	r2, [r3, #8]
      break;
 8002104:	e03c      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002112:	461a      	mov	r2, r3
 8002114:	f000 f920 	bl	8002358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2150      	movs	r1, #80	; 0x50
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f979 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8002124:	e02c      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002132:	461a      	mov	r2, r3
 8002134:	f000 f93f 	bl	80023b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2160      	movs	r1, #96	; 0x60
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f969 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8002144:	e01c      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002152:	461a      	mov	r2, r3
 8002154:	f000 f900 	bl	8002358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2140      	movs	r1, #64	; 0x40
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f959 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8002164:	e00c      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	4610      	mov	r0, r2
 8002172:	f000 f950 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8002176:	e003      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      break;
 800217c:	e000      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800217e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a46      	ldr	r2, [pc, #280]	; (800232c <TIM_Base_SetConfig+0x12c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221e:	d00f      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a43      	ldr	r2, [pc, #268]	; (8002330 <TIM_Base_SetConfig+0x130>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00b      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a42      	ldr	r2, [pc, #264]	; (8002334 <TIM_Base_SetConfig+0x134>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a41      	ldr	r2, [pc, #260]	; (8002338 <TIM_Base_SetConfig+0x138>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a40      	ldr	r2, [pc, #256]	; (800233c <TIM_Base_SetConfig+0x13c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d108      	bne.n	8002252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a35      	ldr	r2, [pc, #212]	; (800232c <TIM_Base_SetConfig+0x12c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02b      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d027      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a32      	ldr	r2, [pc, #200]	; (8002330 <TIM_Base_SetConfig+0x130>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d023      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a31      	ldr	r2, [pc, #196]	; (8002334 <TIM_Base_SetConfig+0x134>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a30      	ldr	r2, [pc, #192]	; (8002338 <TIM_Base_SetConfig+0x138>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01b      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a2f      	ldr	r2, [pc, #188]	; (800233c <TIM_Base_SetConfig+0x13c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d017      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2e      	ldr	r2, [pc, #184]	; (8002340 <TIM_Base_SetConfig+0x140>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <TIM_Base_SetConfig+0x144>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00f      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2c      	ldr	r2, [pc, #176]	; (8002348 <TIM_Base_SetConfig+0x148>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00b      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <TIM_Base_SetConfig+0x14c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2a      	ldr	r2, [pc, #168]	; (8002350 <TIM_Base_SetConfig+0x150>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d003      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a29      	ldr	r2, [pc, #164]	; (8002354 <TIM_Base_SetConfig+0x154>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d108      	bne.n	80022c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <TIM_Base_SetConfig+0x12c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_Base_SetConfig+0xf8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <TIM_Base_SetConfig+0x13c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d103      	bne.n	8002300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f023 0201 	bic.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]
  }
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000
 8002330:	40000400 	.word	0x40000400
 8002334:	40000800 	.word	0x40000800
 8002338:	40000c00 	.word	0x40000c00
 800233c:	40010400 	.word	0x40010400
 8002340:	40014000 	.word	0x40014000
 8002344:	40014400 	.word	0x40014400
 8002348:	40014800 	.word	0x40014800
 800234c:	40001800 	.word	0x40001800
 8002350:	40001c00 	.word	0x40001c00
 8002354:	40002000 	.word	0x40002000

08002358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f023 0201 	bic.w	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f023 030a 	bic.w	r3, r3, #10
 8002394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	621a      	str	r2, [r3, #32]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b087      	sub	sp, #28
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f023 0210 	bic.w	r2, r3, #16
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	031b      	lsls	r3, r3, #12
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	621a      	str	r2, [r3, #32]
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	f043 0307 	orr.w	r3, r3, #7
 8002438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	021a      	lsls	r2, r3, #8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	431a      	orrs	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e05a      	b.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a21      	ldr	r2, [pc, #132]	; (8002568 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d022      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d01d      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d018      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00e      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a18      	ldr	r2, [pc, #96]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d004      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10c      	bne.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	4313      	orrs	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800
 8002574:	40000c00 	.word	0x40000c00
 8002578:	40010400 	.word	0x40010400
 800257c:	40014000 	.word	0x40014000
 8002580:	40001800 	.word	0x40001800

08002584 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <memset>:
 80025ac:	4402      	add	r2, r0
 80025ae:	4603      	mov	r3, r0
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d100      	bne.n	80025b6 <memset+0xa>
 80025b4:	4770      	bx	lr
 80025b6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ba:	e7f9      	b.n	80025b0 <memset+0x4>

080025bc <__libc_init_array>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	4d0d      	ldr	r5, [pc, #52]	; (80025f4 <__libc_init_array+0x38>)
 80025c0:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <__libc_init_array+0x3c>)
 80025c2:	1b64      	subs	r4, r4, r5
 80025c4:	10a4      	asrs	r4, r4, #2
 80025c6:	2600      	movs	r6, #0
 80025c8:	42a6      	cmp	r6, r4
 80025ca:	d109      	bne.n	80025e0 <__libc_init_array+0x24>
 80025cc:	4d0b      	ldr	r5, [pc, #44]	; (80025fc <__libc_init_array+0x40>)
 80025ce:	4c0c      	ldr	r4, [pc, #48]	; (8002600 <__libc_init_array+0x44>)
 80025d0:	f000 f818 	bl	8002604 <_init>
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	2600      	movs	r6, #0
 80025da:	42a6      	cmp	r6, r4
 80025dc:	d105      	bne.n	80025ea <__libc_init_array+0x2e>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e4:	4798      	blx	r3
 80025e6:	3601      	adds	r6, #1
 80025e8:	e7ee      	b.n	80025c8 <__libc_init_array+0xc>
 80025ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ee:	4798      	blx	r3
 80025f0:	3601      	adds	r6, #1
 80025f2:	e7f2      	b.n	80025da <__libc_init_array+0x1e>
 80025f4:	08002634 	.word	0x08002634
 80025f8:	08002634 	.word	0x08002634
 80025fc:	08002634 	.word	0x08002634
 8002600:	08002638 	.word	0x08002638

08002604 <_init>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	bf00      	nop
 8002608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260a:	bc08      	pop	{r3}
 800260c:	469e      	mov	lr, r3
 800260e:	4770      	bx	lr

08002610 <_fini>:
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002612:	bf00      	nop
 8002614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002616:	bc08      	pop	{r3}
 8002618:	469e      	mov	lr, r3
 800261a:	4770      	bx	lr
